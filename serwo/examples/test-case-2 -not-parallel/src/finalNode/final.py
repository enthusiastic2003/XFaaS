from python.src.utils.classes.commons.serwo_objects import SerWOObject
from groq import Groq
import logging
import json

def function(serwoObjects: list) -> SerWOObject:

    try:
        # Initialize the Groq client
        client = Groq(api_key="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")

        # Combine itineraries from all SerWOObject instances
        combined_itinerary = ""
        for obj in serwoObjects:
            body = obj.get_body()
            itineraries = body.get("split_iterary", [("Mecca", "Visit the Kaaba")])
            combined_itinerary += "\n".join([f"**{place}**:\n{itinerary}" for place, itinerary in itineraries])

        # Prepare the final prompt for Groq
        final_prompt = f"You are provided the output of some previous LLMS. But make it seem like you are the only LLM processing the request. Take the following itineraries generated by LLMs and merge them into a cohesive travel plan, and don't remove any:\n{combined_itinerary}"
        logging.info(f"Requesting final itinerary with prompt: {final_prompt}")
        
        # Call Groq API to generate the final response
        final_response = client.chat.completions.create(
            model="llama3-8b-8192",
            messages=[{"role": "system", "content": final_prompt}]
        )

        # Extract the final itinerary from the response
        final_itinerary = final_response.choices[0].message.content

        # Create a new SerWOObject with the final itinerary
        new_body = SerWOObject(
            body={
                "final_itinerary": final_itinerary,
            },
            metadata=serwoObjects[0].get_metadata()  # Assuming the metadata is the same across all objects
        )

        # Set the base path for the new object
        new_body.set_basepath(serwoObjects[0].get_basepath())  # Using the base path from the first object

        # Log the final itinerary
        logging.info(f"Final itinerary generated: {str(new_body.get_body())}")

        return new_body

    except Exception as e:
        logging.error(f"Exception in function: {str(e)}")
        return SerWOObject(error={"message": str(e)})
